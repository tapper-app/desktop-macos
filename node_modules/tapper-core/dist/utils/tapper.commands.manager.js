import inquirer from "inquirer";
import { TapperCommandsExecutionManager } from "../tapper.commands.execution.manager.js";
export class TapperCommandsManager {
    // View Commands
    static VIEW_DEVELOPER_OPTIONS_COMMAND = "developer-options-view";
    static VIEW_TESTING_OPTIONS_COMMAND = "testing-options-view";
    static VALIDATE_ADB_INSTALLATION_COMMAND = "adb-validate";
    static HELP_COMMAND = "help";
    // Execution Commands
    static EXECUTE_DEVELOPER_OPTION_COMMAND = "execute-dev-option";
    static EXECUTE_GENERAL_OPTIONS_COMMAND = "execute-general-options";
    static EXECUTE_TESTING_EVENTS_COMMAND = "execute-testing-events";
    static EXECUTE_ANDROID_MONKEY_TESTING_COMMAND = "execute-monkey-testing";
    static EXECUTE_AUTO_FLOW_TESTING_COMMAND = "execute-auto-flow";
    static async onRepeatAskCommandsQuestion() {
        const options = [];
        const commandsList = TapperCommandsManager.getDropdownOptionsList();
        for (let index = 0; index < commandsList.length; index++) {
            const command = commandsList[index];
            if (command) {
                options.push(command.name);
            }
        }
        const question = {
            type: 'list',
            name: 'selectedOption',
            message: 'Please select an Command To Start:',
            choices: options,
        };
        const answers = await inquirer.prompt([question]);
        const selectedCommand = commandsList.filter((item) => {
            return item.name === answers.selectedOption;
        });
        if (selectedCommand && selectedCommand.length > 0) {
            TapperCommandsExecutionManager.onExecuteCommand(selectedCommand[0]?.command ?? "");
        }
    }
    static async onAskStringInputQuestion(questionName) {
        const question = {
            type: 'input',
            name: 'question',
            message: questionName,
        };
        const answer = await inquirer.prompt([question]);
        return answer.question;
    }
    static async onAskCommandQuestions(questions) {
        const options = questions.map((item) => {
            return item.name;
        });
        const answer = await this.getCommandsQuestionResponseByString(options);
        const selectedCommand = questions.filter((item) => {
            return item.name === answer;
        });
        return Promise.resolve(selectedCommand[0]);
    }
    static async onAskCommandByTestingQuestions(questions) {
        const options = questions.map((item) => {
            return item.name;
        });
        const answer = await this.getCommandsQuestionResponseByString(options);
        const selectedCommand = questions.filter((item) => {
            return item.name === answer;
        });
        return Promise.resolve(selectedCommand[0]);
    }
    static async onAskCommandSettingsQuestions(questions) {
        const options = questions.map((item) => {
            return item.name;
        });
        const answer = await this.getCommandsQuestionResponseByString(options);
        const selectedCommand = questions.filter((item) => {
            return item.name === answer;
        });
        return Promise.resolve(selectedCommand[0]);
    }
    static async getCommandsQuestionResponseByString(questions) {
        const question = {
            type: 'list',
            name: 'selectedOption',
            message: 'Please select an Command To Start:',
            choices: questions,
        };
        const answers = await inquirer.prompt([question]);
        return answers.selectedOption;
    }
    static getApplicationArgsOptions() {
        const options = [];
        // Add Execution Commands
        options.push(...this.getExecutionCommands());
        // Add View Commands
        options.push(...this.getViewCommands());
        return options;
    }
    static getExecutionCommands() {
        return [
            {
                command: TapperCommandsManager.EXECUTE_DEVELOPER_OPTION_COMMAND,
                description: "Toggle Developer Options Attributes To be Enabled / Disabled",
                options: undefined,
                args: [
                    {
                        name: "<string>",
                        description: "Name of the Feature"
                    },
                    {
                        name: "<string>",
                        description: "Toggle On or Off"
                    }
                ]
            },
            {
                command: TapperCommandsManager.EXECUTE_GENERAL_OPTIONS_COMMAND,
                description: "Toggle General Device Options To be Enabled / Disabled",
                options: undefined,
                args: [
                    {
                        name: "<string>",
                        description: "Name of the Feature"
                    },
                    {
                        name: "<string>",
                        description: "Toggle On or Off"
                    }
                ]
            },
            {
                command: TapperCommandsManager.EXECUTE_TESTING_EVENTS_COMMAND,
                description: "Start Several Testing Events Like Tap, Double Tap, Scroll",
                args: [
                    {
                        name: "<string>",
                        description: "Name of the Feature"
                    }
                ],
                options: [
                    {
                        name: "<Start Point, End Point>",
                        description: "Coordinates of the Start and End Point to Do the Scroll"
                    }
                ]
            },
            {
                command: TapperCommandsManager.EXECUTE_ANDROID_MONKEY_TESTING_COMMAND,
                description: "Start Native Monkey Testing With Clicks Interval",
                options: undefined,
                args: [
                // TODO: Fill This Block
                ]
            },
            {
                command: TapperCommandsManager.EXECUTE_AUTO_FLOW_TESTING_COMMAND,
                description: "Start Custom Auto Flow with Application Bounds and Interval for Random Clicks",
                options: undefined,
                args: [
                    {
                        name: "<Timeout Number>",
                        description: "Start Testing on Random Clicks Within Milliseconds Number"
                    }
                ]
            },
        ];
    }
    static getViewCommands() {
        return [
            {
                command: TapperCommandsManager.VIEW_DEVELOPER_OPTIONS_COMMAND,
                description: "List All Available Commands That can be Executed on Connected Android Device from Developer Options",
                args: undefined,
                options: undefined,
            },
            {
                command: TapperCommandsManager.VIEW_TESTING_OPTIONS_COMMAND,
                description: "List All Available Commands That can be Executed to Test Apps On Connected Devices",
                args: undefined,
                options: undefined,
            },
            {
                command: TapperCommandsManager.VALIDATE_ADB_INSTALLATION_COMMAND,
                description: "Validate That Android Debug Bridge Installed on Your Device",
                args: undefined,
                options: undefined,
            },
            {
                command: TapperCommandsManager.HELP_COMMAND,
                description: "Show Examples On CLI Usage on all Options",
                args: undefined,
                options: undefined,
            }
        ];
    }
    static getDropdownOptionsList() {
        return [
            {
                name: "Control Developer Options",
                command: TapperCommandsManager.EXECUTE_DEVELOPER_OPTION_COMMAND
            },
            {
                name: "Control General Device Options",
                command: TapperCommandsManager.EXECUTE_GENERAL_OPTIONS_COMMAND
            },
            {
                name: "Execute Testing Commands",
                command: TapperCommandsManager.EXECUTE_TESTING_EVENTS_COMMAND
            },
            {
                name: "Execute Android Monkey Testing",
                command: TapperCommandsManager.EXECUTE_ANDROID_MONKEY_TESTING_COMMAND
            },
            {
                name: "Execute Auto Testing Flow",
                command: TapperCommandsManager.EXECUTE_AUTO_FLOW_TESTING_COMMAND
            },
            {
                name: "View Developer Options",
                command: TapperCommandsManager.VIEW_DEVELOPER_OPTIONS_COMMAND
            },
            {
                name: "View Testing Options",
                command: TapperCommandsManager.VIEW_TESTING_OPTIONS_COMMAND
            },
            {
                name: "Validate ADB Installation",
                command: TapperCommandsManager.VALIDATE_ADB_INSTALLATION_COMMAND
            },
            {
                name: "Help",
                command: TapperCommandsManager.HELP_COMMAND
            }
        ];
    }
}
