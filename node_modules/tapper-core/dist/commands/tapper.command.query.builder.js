/**
 * Tapper Command Builder Code
 * This Builder Built Like This Because The Best Approach of Generating Commands in Tapper
 * is to Do it Dynamically because not all commands has the Same Structure or Order of Params
 * For This Case To This Builder Build the Commands by Fragments
 *
 * How To Use This Builder ?
 * new TapperCommandQueryBuilder()
 *  .setShellPm()
 *  .setGeneralSettingsKey(command.command)
 *  .setPackageParam()
 *  .setCustomValue(inputOption)
 *  .getQuery()
 */
export class TapperCommandQueryBuilder {
    queryString = "adb";
    setSystemSettingsKey(key) {
        this.queryString += " " + key;
        return this;
    }
    setGeneralSettingsKey(key) {
        this.queryString += " " + key;
        return this;
    }
    setAndroidTestingKey(key) {
        this.queryString += " " + key;
        return this;
    }
    setShellCommand() {
        this.queryString += " shell";
        return this;
    }
    setSystem() {
        this.queryString += " system";
        return this;
    }
    setProp() {
        this.queryString += " setprop";
        return this;
    }
    setSettings() {
        this.queryString += " settings";
        return this;
    }
    setShellPm() {
        this.queryString += " shell pm";
        return this;
    }
    setPackageParam() {
        this.queryString += " -p";
        return this;
    }
    put() {
        this.queryString += " put";
        return this;
    }
    setGlobal() {
        this.queryString += " global";
        return this;
    }
    setBoolean(status) {
        if (status) {
            this.queryString += " true";
        }
        else {
            this.queryString += " false";
        }
        return this;
    }
    setEnabledByNumbers(status) {
        if (status) {
            this.queryString += " 1";
        }
        else {
            this.queryString += " 0";
        }
        return this;
    }
    setInput() {
        this.queryString += " input";
        return this;
    }
    setEnabledByNumbersNextLevel(status) {
        if (status) {
            this.queryString += " 2";
        }
        else {
            this.queryString += " 1";
        }
        return this;
    }
    setCustomValue(value) {
        if (value.includes("+")) {
            this.queryString += value;
        }
        else {
            this.queryString += " " + value;
        }
        return this;
    }
    getQuery() {
        return this.queryString;
    }
}
